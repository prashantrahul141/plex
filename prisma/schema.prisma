generator client {
    provider = "prisma-client-js"
}

generator erd {
    provider                  = "prisma-erd-generator"
    output                    = "./db_table_diagram.svg"
    theme                     = "forest"
    includeRelationFromFields = true
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String    @id @default(cuid())
    name           String
    username       String    @unique @default(cuid())
    email          String    @unique
    emailVerified  DateTime?
    image          String    @default("https://res.cloudinary.com/dwa8at7sx/image/upload/defaultavatar_ve03ed")
    joinedOn       DateTime  @default(now())
    authorVerified Boolean   @default(false)

    settings   Settings @relation(fields: [settingsId], references: [id])
    settingsId String

    url    String?
    banner String  @default("https://res.cloudinary.com/dwa8at7sx/image/upload/defaultbanner_vfhdgt")
    bio    String?

    accounts Account[]
    sessions Session[]

    followers  Follows[] @relation("following")
    followings Follows[] @relation("follower")

    authorPosts Post[] @relation("authorPosts")

    Comment              Comment[]
    LikedByAuthor        LikedByAuthor[]
    bookmarkedByAuthor   BookmarkedByAuthor[]
    CommentLikedByAuthor CommentLikedByAuthor[]

    notifications           Notification[]
    CommentDislikedByAuthor CommentDislikedByAuthor[]
}

model BookmarkedByAuthor {
    post   Post   @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    postId String

    user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId String

    @@id([postId, userId])
}

model LikedByAuthor {
    post   Post   @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    postId String

    user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId String

    @@id([postId, userId])
}

// Posts by author
model Post {
    id        String    @id @default(cuid())
    text      String    @default("")
    image     String?
    createdOn DateTime  @default(now())
    Comments  Comment[]

    Author   User   @relation("authorPosts", fields: [authorId], references: [id], onDelete: Cascade)
    authorId String

    LikedByAuthor      LikedByAuthor[]
    BookmarkedByAuthor BookmarkedByAuthor[]
}

// Comments by author
model Comment {
    id          String   @id @default(cuid())
    commentText String   @default("")
    createdOn   DateTime @default(now())

    author User   @relation(fields: [userId], references: [id])
    userId String

    post   Post   @relation(fields: [postId], references: [id])
    postId String

    CommentLikedByAuthor    CommentLikedByAuthor[]
    CommentDislikedByAuthor CommentDislikedByAuthor[]
}

// authors liked a comment
model CommentLikedByAuthor {
    id String @id @default(cuid())

    comment   Comment @relation(fields: [commentId], references: [id])
    commentId String

    user   User   @relation(fields: [userId], references: [id])
    userId String
}

// authors disliked a comment
model CommentDislikedByAuthor {
    id String @id @default(cuid())

    comment   Comment @relation(fields: [commentId], references: [id])
    commentId String

    user   User   @relation(fields: [userId], references: [id])
    userId String
}

// User settings
model Settings {
    id   String @id @default(cuid())
    User User[]
}

// followers & followings relation
model Follows {
    follower    User   @relation("follower", fields: [followerId], references: [id])
    followerId  String
    following   User   @relation("following", fields: [followingId], references: [id])
    followingId String

    @@id([followerId, followingId])
}

// Notification Model
model Notification {
    id String @id @default(cuid())

    User   User   @relation(fields: [userId], references: [id])
    userId String

    iconImage String   @default("/favicon.ico")
    text      String   @default("")
    url       String   @default("/")
    seen      Boolean  @default(false)
    createdOn DateTime @default(now())
}
