generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String
    username      String    @unique
    email         String    @unique
    emailVerified DateTime?
    image         String    @default("/static/defaultAvatar.png")
    joinedOn      DateTime  @default(now())

    settings   Settings @relation(fields: [settingsId], references: [id])
    settingsId String

    url    String?
    banner String  @default("/static/defaultBanner.png")
    bio    String  @default("")

    authorPosts  authorPosts @relation(fields: [authorPostId], references: [id])
    authorPostId String

    authorComments   authorComments @relation(fields: [authorCommentsId], references: [id])
    authorCommentsId String

    authorLikes  likedPosts @relation(fields: [likedPostsId], references: [id])
    likedPostsId String

    accounts Account[]
    sessions Session[]

    followers  Follows[] @relation("following")
    followings Follows[] @relation("follower")
}

// Posts by author
model authorPosts {
    id    String @id @default(cuid())
    Posts Post[]
    User  User[]
}

model Post {
    id    String  @id @default(cuid())
    text  String  @default("")
    image String?

    authorPost   authorPosts? @relation(fields: [authorPostId], references: [id])
    authorPostId String?
    likedPosts   likedPosts?  @relation(fields: [likedPostsId], references: [id])
    likedPostsId String?
}

// Comments by author
model Comment {
    id String @id @default(cuid())

    authorComments   authorComments? @relation(fields: [authorCommentsId], references: [id])
    authorCommentsId String?
}

model authorComments {
    id       String    @id @default(cuid())
    Comments Comment[]
    User     User[]
}

// Posts liked by author
model likedPosts {
    id         String @id @default(cuid())
    likedPosts Post[]
    User       User[]
}

// User settings
model Settings {
    id   String @id @default(cuid())
    User User[]
}

// followers & followings relation
model Follows {
    follower    User   @relation("follower", fields: [followerId], references: [id])
    followerId  String
    following   User   @relation("following", fields: [followingId], references: [id])
    followingId String

    @@id([followerId, followingId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
