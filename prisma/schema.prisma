// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String
    username      String    @unique
    email         String    @unique
    emailVerified DateTime?
    image         String    @default("/static/defaultAvatar.png")
    joinedOn      DateTime  @default(now())

    settings   Settings @relation(fields: [settingsId], references: [id])
    settingsId String

    url    String?
    banner String  @default("/static/defaultBanner.png")
    bio    String  @default("")

    allPosts Post[]
    comments Comment[]
    likes    Like[]

    follows Follows[]

    accounts Account[]
    sessions Session[]
}

model Post {
    id    String  @id @default(cuid())
    text  String  @default("")
    image String?

    User   User?   @relation(fields: [userId], references: [id])
    userId String?
}

model Comment {
    id String @id @default(cuid())

    User   User?   @relation(fields: [userId], references: [id])
    userId String?
}

model Like {
    id String @id @default(cuid())

    User   User?   @relation(fields: [userId], references: [id])
    userId String?
}

model Settings {
    id   String @id @default(cuid())
    User User[]
}

model Follows {
    id String @id @default(cuid())

    User   User?   @relation(fields: [userId], references: [id])
    userId String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
